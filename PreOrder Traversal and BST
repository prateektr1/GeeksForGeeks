class Solution {
    static int canRepresentBST(int arr[], int N) {
        
        Stack<Integer> s = new Stack<Integer>();
   
        // Initialize current root as minimum possible
        // value
        int root = Integer.MIN_VALUE;
   
        // Traverse given array
        for (int i = 0; i < arr.length; i++) {
            // If we find a node who is on right side
            // and smaller than root, return false
            if (arr[i] < root) {
                return 0;
            }
   
            // If pre[i] is in right subtree of stack top,
            // Keep removing items smaller than pre[i]
            // and make the last removed item as new
            // root.
            while (!s.empty() && s.peek() < arr[i]) {
                root = s.peek();
                s.pop();
            }
   
            // At this point either stack is empty or
            // pre[i] is smaller than root, push pre[i]
            s.push(arr[i]);
        }
        return 1;
        
    }
}
