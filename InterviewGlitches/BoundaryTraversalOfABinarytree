class Solution
{
    ArrayList<Integer> ls = new ArrayList<Integer>();
    
    void printLeaves(Node node)
    {
        if(node==null)
        return;
        
        printLeaves(node.left);
        
        if(node.left==null && node.right==null)
        {
            ls.add(node.data);
        }
        
         printLeaves(node.right);
    }
    
    void printBoundaryLeft(Node node)
    {
        if(node==null)
          return;
          
         if(node.left!=null)
         {
             ls.add(node.data);
              printBoundaryLeft(node.left);
         }
         
         else if(node.right!=null)
         {
             ls.add(node.data);
             printBoundaryLeft(node.right);
         }
        
    }
    
    void printBoundaryRight(Node node)
    {
        if(node==null)
          return;
          
         if(node.right!=null)
         {
             printBoundaryRight(node.right);
             ls.add(node.data);
         }
         
         else if(node.left!=null)
         {
             printBoundaryRight(node.left);
             ls.add(node.data);
         }
        
    }
    
    
    
	ArrayList <Integer> printBoundary(Node node)
	{
	    if(node==null)
	      return ls;
	      
	      ls.add(node.data);
	      
	      printBoundaryLeft(node.left);
	      printLeaves(node.left);
	      printLeaves(node.right);
	      printBoundaryRight(node.right);
	      
	      return ls;
	}
}
