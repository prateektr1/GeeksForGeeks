 Boolean isCyclicUtil(int v,Boolean visited[], int parent,ArrayList<ArrayList<Integer>> adj)
    {
        // Mark the current node as visited
        visited[v] = true;
        Integer i;
 
        // Recur for all the vertices
        // adjacent to this vertex
        Iterator<Integer> it =
                adj.get(v).listIterator();
        while (it.hasNext())
        {
            i = it.next();
 
            // If an adjacent is not
            // visited, then recur for that
            // adjacent
            if (!visited[i])
            {
                if (isCyclicUtil(i, visited, v,adj))
                    return true;
            }
 
            // If an adjacent is visited
            // and not parent of current
            // vertex, then there is a cycle.
            else if (i != parent)
                return true;
        }
        return false;
    }
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
       Boolean visited[] = new Boolean[V];
        for (int i = 0; i < V; i++)
            visited[i] = false;
 
        for (int u = 0; u < V; u++)
        { 
         
            if (!visited[u])
                if (isCyclicUtil(u, visited, -1,adj))
                    return true;
        }
 
        return false;
        
    }
