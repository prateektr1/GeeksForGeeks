class Solution
{
       
       static int cutUtil(int l,int p,int q,int r)
       {
          int dp[] = new int[l+1];
          
          for(int m=0;m<=l;m++)
              dp[m] =-1;
              
          dp[0]=0;
              
          for(int i=0;i<=l;i++)
          {
              if(dp[i]==-1)
               continue;
               
              if(i+p<=l)
              {
                  dp[i+p] = Math.max(dp[i+p],dp[i]+1);
              }
              
               if(i+q<=l)
              {
                  dp[i+q] = Math.max(dp[i+q],dp[i]+1);
              }
              
               if(i+r<=l)
              {
                  dp[i+r] = Math.max(dp[i+r],dp[i]+1);
              }
          }
          
          if(dp[l]==-1)
           return 0;
             
          return dp[l];
       }
       
    public int maximizeCuts(int n, int x, int y, int z)
    {
       
         int a = cutUtil(n,x,y,z);
         
         if(a<0) return 0;
         
         return a;
    }
}
