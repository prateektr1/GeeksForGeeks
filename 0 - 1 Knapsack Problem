// { Driver Code Starts
import java.util.*;
import java.io.*;
import java.lang.*;

class gfg
{
    public static void main(String args[])throws IOException
    {
        //reading input using BufferedReader class
        BufferedReader read = new BufferedReader(new InputStreamReader(System.in));
        
        //reading total testcases
        int t = Integer.parseInt(read.readLine());
        
        while(t-- > 0)
        {
            //reading number of elements and weight
            int n = Integer.parseInt(read.readLine());
            int w = Integer.parseInt(read.readLine());
            
            int val[] = new int[n];
            int wt[] = new int[n];
            
            String st[] = read.readLine().trim().split("\\s+");
            
            //inserting the values
            for(int i = 0; i < n; i++)
              val[i] = Integer.parseInt(st[i]);
             
            String s[] = read.readLine().trim().split("\\s+"); 
            
            //inserting the weigths
            for(int i = 0; i < n; i++)
              wt[i] = Integer.parseInt(s[i]);
              
            //calling method knapSack() of class Knapsack
            System.out.println(new Solution().knapSack(w, wt, val, n));
        }
    }
}



// } Driver Code Ends





class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    
    static int solveKnapsack(int profits[],int weights[],int capacity)
    {
    
       if(capacity<=0 || weights.length!=profits.length || profits.length==0)
            return 0;
            
       int n = profits.length;
       
       int dp[][] = new int[n][capacity+1];
       
       for(int c=0; c <= capacity; c++) {
      if(weights[0] <= c)
        dp[0][c] = profits[0];
    }
    
        for(int i=1;i<n;i++)
        {
            for(int c=1;c<=capacity;c++)
            {
                int profit1=0;
                int profit2=0;
                
                if(weights[i]<=c)
                   profit1 = profits[i]+dp[i-1][c-weights[i]];
                 
                profit2 = dp[i-1][c];
                
                dp[i][c] = Math.max(profit1,profit2);
                
            }
        }
        
        
        return dp[n-1][capacity];
         
       
    }
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
         // your code here 
         Integer dp[][] = new Integer[val.length][W+1];
         
         return solveKnapsack(val,wt,W);
          
    } 
}
